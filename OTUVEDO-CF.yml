AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Moses's CloudFormation template designed to establish a Virtual Private Cloud (VPC), permit Secure Shell (SSH) access exclusively from trusted networks, and deploy a singular instance accompanied by an Elastic IP address.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: "The IP address range that can be used to access the EC2 instance"
    Type: String
    MinLength: "9" # 1.1.1.1/0
    MaxLength: "18" # 255.255.255.255/32
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-04b4f1a9cf54c11d0 # Ubuntu 24.04 LTS - Noble
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 172.18.0.0/23
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-VPC
  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.18.0.0/24
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-Subnet
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-InternetGateway
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-RouteTable
  Route:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  UbuntuIPAddress:
    Type: "AWS::EC2::EIP"
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref PublicUbuntuInstance
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-EIP
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and HTTP access via port 80.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 74.135.75.4/32 # Home IP
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 130.108.0.0/16 # WSU IP
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 192.168.1.0/24 # Local Network IPs
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 172.18.0.0/23 # Instances within the VPC
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0 # HTTP access from any IP source
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-SecurityGroup
  NetworkACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-NACL
  InboundAllowAllRule:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  OutboundAllowAllRule:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 200
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  DenyWttrOutBound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 50
      Protocol: -1
      Egress: true
      RuleAction: deny
      CidrBlock: 5.9.243.187/32
      PortRange:
        From: 1
        To: 65535
  SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkACL
  PublicUbuntuInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: OTUVEDO-CF-UbuntuInstance
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
          PrivateIpAddress: 172.18.0.25
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe

            apt-get update && \
            apt-get install -y \
              git \
              htop \
              sl && \
            echo "This is from a test template" > /home/ubuntu/lux.txt && \
            reboot
